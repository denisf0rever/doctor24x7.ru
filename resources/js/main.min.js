import Swiper from "swiper/bundle";

document.addEventListener("DOMContentLoaded", function () {
    /*ВЕРХНЕЕ МОБИЛЬНОЕ МЕНЮ БУРГЕР*/

    const burger = document.querySelector(".header__burger");
    const mobileHeaderNav = document.querySelector(".mobile-header-nav");

    // Открытие меню при клике на бургер

    if (burger) {
        burger.onclick = () => {
            mobileHeaderNav.classList.add("mobile-header-nav__opened");
        };

        document.addEventListener("click", (event) => {
            // Проверяем, если клик был вне меню и не по бургеру
            if (
                !mobileHeaderNav.contains(event.target) &&
                !burger.contains(event.target)
            ) {
                mobileHeaderNav.classList.remove("mobile-header-nav__opened");
            }
        });
    }

    // Закрытие меню при клике вне меню

    /*ВЕРХНЕЕ МОБИЛЬНОЕ МЕНЮ БУРГЕР*/

    /* КАСТОМНЫЙ СЕЛЕКТОР */
    const selectWrappers = document.querySelectorAll(".custom-select");

    if (selectWrappers.length > 0) {
        selectWrappers.forEach((selectWrapper) => {
            const select = selectWrapper.querySelector(
                ".custom-select__wrapper"
            );
            const selectArrow = selectWrapper.querySelector(
                ".custom-select__arrow"
            );

            selectWrapper.onclick = (e) => {
                e.stopPropagation(); // предотвращаем всплытие клика
                if (selectArrow) {
                    selectArrow.classList.toggle("custom-select__rotate-arrow");
                }
                select.classList.toggle("custom-select__hide");
            };

            document.addEventListener("click", (e) => {
                if (!selectWrapper.contains(e.target)) {
                    if (selectArrow) {
                        selectArrow.classList.remove(
                            "custom-select__rotate-arrow"
                        );
                    }
                    select.classList.add("custom-select__hide");
                }
            });
        });
    }

    /* КАСТОМНЫЙ СЕЛЕКТОР */

    /*ТАБЫ НА ГЛАВНОЙ СТРАНИЦЕ */

    const buttons = document.querySelectorAll(".cards__toggle-item");
    const contents = document.querySelectorAll(".cards__list");

    if (buttons.length > 0) {
        buttons.forEach((button) => {
            button.addEventListener("click", function () {
                const tabId = this.getAttribute("data-tab");
                // Deactivate all tabs
                buttons.forEach((btn) =>
                    btn.classList.remove("cards__toggle-item-active")
                );
                contents.forEach((content) =>
                    content.classList.add("cards__hide")
                );

                // Activate the clicked tab and its content
                this.classList.add("cards__toggle-item-active");
                document.getElementById(tabId).classList.remove("cards__hide");
            });
        });
    }

    /*табы 2 */

    const buttonsМVariant = document.querySelectorAll(
        ".cards__toggle-item-variant"
    );

    if (buttonsМVariant.length > 0) {
        buttonsМVariant.forEach((button) => {
            button.addEventListener("click", function () {
                const tabId = this.getAttribute("data-tab");
                // Deactivate all tabs
                buttonsМVariant.forEach((btn) =>
                    btn.classList.remove("cards__toggle-item-variant-active")
                );
                contents.forEach((content) =>
                    content.classList.add("cards__hide")
                );

                // Activate the clicked tab and its content
                this.classList.add("cards__toggle-item-variant-active");
                document.getElementById(tabId).classList.remove("cards__hide");
            });
        });
    }

    /*ТАБЫ НА ГЛАВНОЙ СТРАНИЦЕ */

    /*МОБИЛЬНОЕ МЕНЮ */

    let isConsultanstsLoaded = false;

    const bottomMenuOpen = document.querySelector(".mobile-panel-bottom__open");
    const topMobilePanel = document.querySelector(".mobile-panel-top");
    const topMobilePanelClose = document.querySelector(
        ".mobile-panel-top__close"
    );

    if (bottomMenuOpen) {
        bottomMenuOpen.onclick = (e) => {
            e.preventDefault();
            bottomMenuOpen.classList.toggle(
                "mobile-panel-bottom__open-link-active"
            );
            topMobilePanel.classList.toggle("mobile-panel-top__active");
            if (!isConsultanstsLoaded) {
                showFirstEmployeeScreen();
            }
        };
    }

    if (topMobilePanelClose) {
        topMobilePanelClose.onclick = () => {
            bottomMenuOpen.classList.remove(
                "mobile-panel-bottom__open-link-active"
            );
            topMobilePanel.classList.remove("mobile-panel-top__active");
            if (!isConsultanstsLoaded) {
                showFirstEmployeeScreen();
            }
        };
    }

    /*МОБИЛЬНОЕ МЕНЮ */

    /*МОБИЛЬНЫЕ ТАБЫ */

    const mobileTabsButtons = document.querySelectorAll(
        ".mobile-panel-top__tub-button"
    );
    const mobileTabs = document.querySelectorAll(".mobile-panel-top__tub");

    const changeMobileTab = (el) => {
        mobileTabsButtons.forEach((element, key) => {
            element.classList.remove("mobile-panel-top__tub-button-active");
            if (element == el) {
                element.classList.add("mobile-panel-top__tub-button-active");
            }
        });
        mobileTabs.forEach((element, key) => {
            element.style.display = "none";
            if (
                el.getAttribute("data-tab") == element.getAttribute("data-tab")
            ) {
                element.style.display = "block";
            }
        });
    };

    if (mobileTabsButtons.length > 0) {
        mobileTabsButtons.forEach((el) => {
            el.onclick = (e) => {
                changeMobileTab(el);
            };
        });
    }

    /*МОБИЛЬНЫЕ ТАБЫ */

    /*ПОЛУЧЕНИЕ ЭКСПЕРТОВ ИЗ JSON */

    let employeesData = {};

    const fetchEmployees = async () => {
        try {
            const response = await fetch("/doctors.json");
            if (!response.ok) {
                throw new Error(
                    "Network response was not ok " + response.statusText
                );
            }
            employeesData = await response.json();
        } catch (error) {
            console.error("Error fetching the JSON file:", error);
        }
    };

    const createEmployeeCategory = (data) => {
        return `
      <li class="employees__item">
        <div class="employees__category">
          <div class="employees__category-name">${data}</div>
        </div>
      </li>
    `;
    };

    const createEmployeeElement = (data) => {
        return `
      <li class="employees__item">
        <a href="/profile/${data.slug}" class="employees__link">
          <img
            src="/uploads/sfGuard/avatars/${data.avatar}"
            alt="" class="employees__avatar">
          <div class="employees__fullname">${data.name}</div>
          <div class="employees__caption">${data.caption}</div>
        </a>
      </li>
      `;
    };

    const employeesList = document.querySelector(".employees__list");
    const employeesBack = document.querySelector(".employees__item-back");

    let employeeCategoryHistory = [];

    if (employeesBack) {
        employeesBack.onclick = () => {
            while (employeesList.firstChild) {
                employeesList.removeChild(employeesList.firstChild);
            }
            employeeCategoryHistory.splice(
                employeeCategoryHistory.length - 1,
                1
            );
            showEmployees(
                employeeCategoryHistory[employeeCategoryHistory.length - 1]
            );
            if (employeeCategoryHistory.length === 1) {
                employeesBack.classList.add("employees__hide");
            }
        };
    }

    const showEmployees = (employeesDataItemsFull, operationType) => {
        if (employeeCategoryHistory.length === 1) {
            employeesBack.classList.add("employees__hide");
        }
        const employeesDataItems = Object.keys(employeesDataItemsFull);
        if (Array.isArray(employeesDataItemsFull)) {
            for (let i = 0; i < employeesDataItemsFull.length; i++) {
                employeesList.insertAdjacentHTML(
                    "beforeend",
                    createEmployeeElement(employeesDataItemsFull[i])
                );
            }
        } else {
            for (let i = 0; i < employeesDataItems.length; i++) {
                employeesList.insertAdjacentHTML(
                    "beforeend",
                    createEmployeeCategory(employeesDataItems[i])
                );
            }
        }
        const employeeItems = document.querySelectorAll(".employees__item");
        if (operationType === 1) {
            employeeCategoryHistory.push(
                employeesDataItemsFull[employeesDataItems[1]]
            );
            while (employeesList.firstChild) {
                employeesList.removeChild(employeesList.firstChild);
            }
            showEmployees(
                employeeCategoryHistory[employeeCategoryHistory.length - 1],
                0
            );
            employeesBack.classList.remove("employees__hide");
        } else {
            employeeItems.forEach((el, key) => {
                el.onclick = () => {
                    if (employeeCategoryHistory.length < 3) {
                        employeeCategoryHistory.push(
                            employeesDataItemsFull[employeesDataItems[key]]
                        );
                        while (employeesList.firstChild) {
                            employeesList.removeChild(employeesList.firstChild);
                        }
                        showEmployees(
                            employeeCategoryHistory[
                                employeeCategoryHistory.length - 1
                            ],
                            0
                        );
                        employeesBack.classList.remove("employees__hide");
                    }
                };
            });
        }
    };

    const showFirstEmployeeScreen = async (operationType) => {
        await fetchEmployees();
        employeeCategoryHistory[0] = employeesData;
        showEmployees(employeesData, operationType);
    };

    const doctorsButton = document.querySelector("#doctors");
    const psychologistsButton = document.querySelector("#psychologists");

    if (doctorsButton) {
        doctorsButton.onclick = (event) => {
            event.preventDefault();
            if (
                !bottomMenuOpen.classList.contains(
                    "mobile-panel-bottom__open-link-active"
                )
            ) {
                employeesList.innerHTML = "";
                employeesData = {};
                employeeCategoryHistory = [];
                bottomMenuOpen.classList.add(
                    "mobile-panel-bottom__open-link-active"
                );
                topMobilePanel.classList.add("mobile-panel-top__active");
                if (!isConsultanstsLoaded) {
                    showFirstEmployeeScreen(0);
                }
                changeMobileTab(mobileTabsButtons[1]);
            }
        };
    }

    if (psychologistsButton) {
        psychologistsButton.onclick = (event) => {
            event.preventDefault();
            if (
                !bottomMenuOpen.classList.contains(
                    "mobile-panel-bottom__open-link-active"
                )
            ) {
                employeesList.innerHTML = "";
                employeesData = {};
                employeeCategoryHistory = [];
                bottomMenuOpen.classList.add(
                    "mobile-panel-bottom__open-link-active"
                );
                topMobilePanel.classList.add("mobile-panel-top__active");
                if (!isConsultanstsLoaded) {
                    showFirstEmployeeScreen(1);
                }
                changeMobileTab(mobileTabsButtons[1]);
            }
        };
    }

    /*ПОЛУЧЕНИЕ ЭКСПЕРТОВ ИЗ JSON */

    /*СЛАЙДЕР КОНСУЛЬТАЦИЯ */

    const checkArrowVisibility = (swiper) => {
        const prevArrow = document.querySelector(
            ".consultation-slider__arrow-before"
        );
        const nextArrow = document.querySelector(
            ".consultation-slider__arrow-after"
        );

        if (swiper.isBeginning) {
            prevArrow.style.display = "none"; // Скрыть стрелку назад
        } else {
            prevArrow.style.display = "flex"; // Показать стрелку назад
        }

        if (swiper.isEnd) {
            nextArrow.style.display = "none"; // Скрыть стрелку вперед
        } else {
            nextArrow.style.display = "flex"; // Показать стрелку вперед
        }
    };

    const consultationSlider = new Swiper(".consultation-slider__slider", {
        slidesPerView: 3,
        spaceBetween: 16,
        navigation: {
            nextEl: ".consultation-slider__arrow-after",
            prevEl: ".consultation-slider__arrow-before",
        },
        breakpoints: {
            // Когда ширина экрана >= 0px
            0: {
                slidesPerView: 1,
                spaceBetween: 10,
            },
            // Когда ширина экрана >= 600px
            600: {
                slidesPerView: 2,
                spaceBetween: 12,
            },
            // Когда ширина экрана >= 1000px
            1000: {
                slidesPerView: 3,
                spaceBetween: 16,
            },
        },
        on: {
            init: function () {
                checkArrowVisibility(this);
            },
            slideChange: function () {
                checkArrowVisibility(this);
            },
        },
    });

    /*СЛАЙДЕР КОНСУЛЬТАЦИЯ */

    /*СЛАЙДЕР COMMENT RADIO */

    const consultationCommentSlider = new Swiper(
        ".consultation-form__radio-slider",
        {
            slidesPerView: "auto",
            centeredSlides: false,
            watchOverflow: true,
            freeMode: true,
        }
    );

    /*СЛАЙДЕР COMMENT RADIO */

    /*КОНСУЛЬТАЦИЯ ВАЛИДАЦИЯ ФОРМЫ */

    const validationItem = document.querySelectorAll(
        ".consultation-form__validation-wrapper"
    );
    const validationTitle = document.querySelector("input[name=title]");
    const validationDescription = document.querySelector(
        "textarea[name=description]"
    );
    const validationAge = document.querySelector("input[name=age]");
    const validationUsername = document.querySelector("input[name=username]");
    const validationEmail = document.querySelector("input[name=email]");

    const checkValidationInput = (inputElement, validationRules) => {
        const { name, errorText, validate } = validationRules;

        if (inputElement.getAttribute("name") === name) {
            const inputValue = inputElement.value.trim(); // Убираем лишние пробелы

            // Удаляем старое сообщение об ошибке, если оно существует
            const existingError = document.querySelector(
                `[error-data=${name}]`
            );
            if (existingError) {
                existingError.remove();
            }

            // Проверка на наличие ошибок с помощью callback
            const isValid = validate(inputValue);

            if (!isValid) {
                // Создаем div для сообщения об ошибке
                const errorDiv = document.createElement("div");
                errorDiv.textContent = errorText;
                errorDiv.classList.add("consultation-form__error-message");
                errorDiv.setAttribute("error-data", name);

                inputElement.insertAdjacentElement("afterend", errorDiv);
                inputElement.classList.add("consultation-form__input-error");
                return false;
            } else {
                inputElement.classList.remove("consultation-form__input-error");
                return true;
            }
        }
    };

    if (validationItem.length > 0) {
        validationItem.forEach((el) => {
            if (el.querySelector("input")) {
                el.querySelector("input").addEventListener("blur", function () {
                    if (this.getAttribute("name") === "title") {
                        const titleValidationRules = {
                            name: "title",
                            errorText: "Текст должен быть длиннее 10 символов",
                            validate: (value) => value.length > 10, // Функция валидации
                        };

                        checkValidationInput(this, titleValidationRules);
                    }
                    if (this.getAttribute("name") === "age") {
                        const ageValidationRules = {
                            name: "age",
                            errorText: "Поле должно быть заполненым",
                            validate: (value) => value.length > 0, // Функция валидации
                        };
                        checkValidationInput(this, ageValidationRules);
                    }
                    if (this.getAttribute("name") === "username") {
                        const usernameValidationRules = {
                            name: "username",
                            errorText: "Поле должно быть заполненым",
                            validate: (value) => value.length > 0, // Функция валидации
                        };
                        checkValidationInput(this, usernameValidationRules);
                    }
                    if (this.getAttribute("name") === "email") {
                        const emailPattern =
                            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                        const emailValidationRules = {
                            name: "email",
                            errorText:
                                "Email введен некорректно. Пример: example@domain.ru",
                            validate: (value) => emailPattern.test(value), // Функция валидации
                        };
                        checkValidationInput(this, emailValidationRules);
                    }
                });
            }
            if (el.querySelector("textarea")) {
                el.querySelector("textarea").addEventListener(
                    "blur",
                    function () {
                        if (this.getAttribute("name") === "description") {
                            const descriptionValidationRules = {
                                name: "description",
                                errorText:
                                    "Текст должен быть длиннее 10 символов",
                                validate: (value) => value.length > 10, // Функция валидации
                            };
                            checkValidationInput(
                                this,
                                descriptionValidationRules
                            );
                        }
                    }
                );
            }
        });
    }

    /*КОНСУЛЬТАЦИЯ ВАЛИДАЦИЯ ФОРМЫ */

    /* КОНСУЛЬТАЦИЯ ТАБЫ */

    const consultationTubs = document.querySelectorAll(
        ".consultation-form__tub"
    );
    const consultationPrevBtn = document.querySelector(
        "#consultation-form-prev"
    );
    const consultationNextBtn = document.querySelector(
        "#consultation-form-next"
    );
    const consultationFormWrapper = document.querySelector(
        ".consultation-form__wrapper"
    );
    const stepNum = document.querySelector("#step");
    const activeTimeline = document.querySelector(
        ".consultation-form__timeline-active"
    );
    const consultationForm = document.querySelector("#consultation-form");

    let activeTub = 1;

    const changeConsultationTub = () => {
        stepNum.innerHTML = activeTub;

        activeTimeline.style.width = `${activeTub * 25}%`;

        if (activeTub === 1) {
            consultationPrevBtn.style.display = "none";
        } else {
            consultationPrevBtn.style.display = "flex";
        }

        if (activeTub === 4) {
            consultationNextBtn.innerHTML = "Отправить";
        } else {
            consultationNextBtn.innerHTML = "Продолжить";
        }
    };

    const selectconsultationTub = (direction) => {
        if (direction === "next") {
            let isValidation = true;
            switch (activeTub) {
                case 2:
                    const titleValidationRules = {
                        name: "title",
                        errorText: "Текст должен быть длиннее 10 символов",
                        validate: (value) => value.length > 10,
                    };
                    if (
                        !checkValidationInput(
                            validationTitle,
                            titleValidationRules
                        )
                    )
                        isValidation = false;
                    break;
                case 3: {
                    const descriptionValidationRules = {
                        name: "description",
                        errorText: "Текст должен быть длиннее 10 символов",
                        validate: (value) => value.length > 10, // Функция валидации
                    };
                    if (
                        !checkValidationInput(
                            validationDescription,
                            descriptionValidationRules
                        )
                    )
                        isValidation = false;
                    const ageValidationRules = {
                        name: "age",
                        errorText: "Поле должно быть заполненым",
                        validate: (value) => value.length > 0, // Функция валидации
                    };
                    if (
                        !checkValidationInput(validationAge, ageValidationRules)
                    )
                        isValidation = false;
                    break;
                }
                case 4: {
                    const usernameValidationRules = {
                        name: "username",
                        errorText: "Поле должно быть заполненым",
                        validate: (value) => value.length > 0, // Функция валидации
                    };
                    if (
                        !checkValidationInput(
                            validationUsername,
                            usernameValidationRules
                        )
                    )
                        isValidation = false;
                    const emailPattern =
                        /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                    const emailValidationRules = {
                        name: "email",
                        errorText:
                            "Email введен некорректно. Пример: example@domain.ru",
                        validate: (value) => emailPattern.test(value), // Функция валидации
                    };
                    if (
                        !checkValidationInput(
                            validationEmail,
                            emailValidationRules
                        )
                    )
                        isValidation = false;
                    break;
                }
                default:
                    break;
            }
            if (!isValidation) return;
            if (activeTub === 4) {
                consultationForm.submit();
            } else {
                consultationTubs.forEach((el, key) => {
                    el.classList.remove("consultation-form__tub-active");
                    if (+el.getAttribute("data-step") == activeTub + 1) {
                        el.classList.add("consultation-form__tub-active");
                    }
                });
                activeTub += 1;
            }
        }
        if (direction === "prev") {
            consultationTubs.forEach((el, key) => {
                el.classList.remove("consultation-form__tub-active");
                if (+el.getAttribute("data-step") == activeTub - 1) {
                    el.classList.add("consultation-form__tub-active");
                }
            });
            activeTub -= 1;
        }
        changeConsultationTub();
    };

    if (stepNum) {
        changeConsultationTub();
    }

    if (consultationPrevBtn) {
        consultationPrevBtn.onclick = () => {
            if (consultationFormWrapper) {
                consultationFormWrapper.scrollIntoView({
                    behavior: "smooth",
                    block: "start",
                });
            }
            selectconsultationTub("prev");
        };
    }

    if (consultationNextBtn) {
        consultationNextBtn.onclick = () => {
            if (consultationFormWrapper) {
                consultationFormWrapper.scrollIntoView({
                    behavior: "smooth",
                    block: "start",
                });
            }
            selectconsultationTub("next");
        };
    }

    /* КОНСУЛЬТАЦИЯ ТАБЫ */

    /* КОНСУЛЬТАЦИЯ СЕЛЕКТОРЫ */

    const consultationOptions = document.querySelectorAll(
        ".consultation-form__option"
    );
    const rubricInput = document.querySelector("#rubric_id");
    const rubricSpan = document.querySelector(
        ".consultation-form__rubric-input-span"
    );

    const ageConsultationOptions = document.querySelectorAll(
        ".consultation-form__age-type-option"
    );
    const ageInput = document.querySelector("#age_type");
    const ageSpan = document.querySelector(
        ".consultation-form__age-type-input-span"
    );

    if (consultationOptions.length > 0) {
        consultationOptions.forEach((el) => {
            el.onclick = () => {
                rubricInput.value = el.value;
                rubricSpan.innerHTML = el.innerHTML;
            };
        });
    }

    if (ageConsultationOptions.length > 0) {
        ageConsultationOptions.forEach((el) => {
            el.onclick = () => {
                ageInput.value = el.value;
                ageSpan.innerHTML = el.innerHTML;
            };
        });
    }

    /* КОНСУЛЬТАЦИЯ СЕЛЕКТОРЫ */

    /*КОНСУЛЬТАЦИЯ ФОТО */
    const updateFileInputListeners = () => {
        document
            .querySelectorAll(".consultation-form__input-photo")
            .forEach((input) => {
                input.addEventListener("change", function (event) {
                    const maxLength = 20;
                    let fileName = event.target.files[0]
                        ? event.target.files[0].name
                        : "Загрузить фото";

                    if (fileName.length > maxLength) {
                        fileName = fileName.substring(0, maxLength) + "...";
                    }

                    event.target
                        .closest(".consultation-form__photo-item")
                        .querySelector(
                            ".consultation-form__input-photo-text"
                        ).textContent = fileName;
                });
            });
    };

    updateFileInputListeners();

    const addPhotoBtn = document.querySelector(".consultation-form__add-photo");
    const photosWrapper = document.querySelector(".consultation-form__photos");

    const createPhotoInput = () => {
        const uniqueId = `file-upload-${Date.now()}-${Math.floor(
            Math.random() * 1000
        )}`;

        const photoItem = document.createElement("div");
        photoItem.classList.add("consultation-form__photo-item");

        const label = document.createElement("label");
        label.classList.add("consultation-form__photo-wrapper");
        label.setAttribute("for", uniqueId);

        const img = document.createElement("img");
        img.src = "/images/dashboard/#.svg";
        img.alt = "";
        img.classList.add("consultation-form__input-photo-img");

        const spanText = document.createElement("span");
        spanText.classList.add("consultation-form__input-photo-text");
        spanText.textContent = "Загрузить фото";

        const fileInput = document.createElement("input");
        fileInput.classList.add("consultation-form__input-photo");
        fileInput.setAttribute("type", "file");
        fileInput.setAttribute("name", "images[]");
        fileInput.setAttribute("id", uniqueId);

        const deleteBtn = document.createElement("span");
        deleteBtn.classList.add("consultation-form__delete-photo");
        deleteBtn.textContent = "Удалить";

        deleteBtn.addEventListener("click", () => {
            photoItem.remove();
        });

        label.appendChild(img);
        label.appendChild(spanText);
        photoItem.appendChild(label);
        photoItem.appendChild(fileInput);
        photoItem.appendChild(deleteBtn);

        return photoItem;
    };

    if (addPhotoBtn && photosWrapper) {
        addPhotoBtn.onclick = () => {
            const newInput = createPhotoInput();
            photosWrapper.appendChild(newInput);
            updateFileInputListeners();
        };
    }

    /*КОНСУЛЬТАЦИЯ ФОТО */

    /*КОНСУЛЬТАЦИЯ ПОЛУЧЕНИЕ rubric_id И description из URL */

    (() => {
        const url = new URL(window.location.href);
        const rubricId = url.searchParams.get("rubric_id");
        const description = url.searchParams.get("description");
        const rubricSpan = document.querySelector(
            ".consultation-form__rubric-input-span"
        );
        const descriptionInput = document.querySelector("#description");
        const rubricInput = document.querySelector("#rubric_id");
        const consultationOptions = document.querySelectorAll(
            ".consultation-form__option"
        );
        if (
            rubricId !== null &&
            rubricSpan &&
            rubricId &&
            rubricInput &&
            consultationOptions.length > 0 &&
            descriptionInput
        ) {
            if (description) {
                descriptionInput.innerHTML = description;
            }
            consultationOptions.forEach((el) => {
                if (el.value === +rubricId) {
                    rubricInput.value = rubricId;
                    rubricSpan.innerHTML = el.innerHTML;
                }
            });
        }
    })();

    /*КОНСУЛЬТАЦИЯ ПОЛУЧЕНИЕ rubric_id И description из URL */

    /* КОММЕНТАРИИ В КОНСУЛЬТАЦИЯХ */

    const bodyElement = document.querySelector("body");

    //CONTACT MENU

    const commentMenuBtn = document.querySelectorAll(".comment__menu-btn");
    const commentMenu = document.querySelector(".comment-menu");
    const commentButtons = document.querySelectorAll(".comment-menu__button");
    const hideButton = document.querySelector(".comment-menu__hide-button");
    const deleteButton = document.querySelector(".comment-menu__button-delete");
    const editButton = document.querySelector(".comment-menu__button-edit");
    const chatButton = document.querySelector(
        ".comment-menu__contact-item-chat"
    );
    const chatButtonLink = document.querySelector(
        ".comment-menu__contact-item-chat a"
    );

    const baseChatButtonHref = chatButtonLink.getAttribute("href") || "";

    commentMenuBtn.forEach((el, key) => {
        el.onclick = () => {
            // const parent = el.closest(
            //     ".comment__main-comment, .comment__sub-comment"
            // );
            // if (parent && chatButtonLink) {
            //     const userId = parent.getAttribute("user-id");
            //     if (userId) {
            //         chatButton.style.display = "block";
            //         chatButtonLink.setAttribute(
            //             "href",
            //             baseChatButtonHref + userId
            //         );
            //     } else {
            //         chatButton.style.display = "none";
            //     }
            // }
            if (deleteButton) {
                deleteButton.setAttribute(
                    "data-id",
                    el.getAttribute("data-id")
                );
                editButton.setAttribute(
                    "href",
                    `//cabinet.puzkarapuz.ru/cabinet/comments/${el.getAttribute(
                        "data-id"
                    )}/edit`
                );
            }
            commentMenu.classList.toggle("comment-menu__hide");
            if (commentButtons.length > 0) {
                commentButtons.forEach((btn) => {
                    btn.setAttribute("data-id", el.getAttribute("data-id"));
                });
            }
        };
    });

    if (hideButton) {
        hideButton.onclick = () => {
            commentMenu.classList.add("comment-menu__hide");
        };
    }

    //INPUT SIZE
    let textarea = document.querySelector(".full-form__question-input");

    if (textarea) {
        textarea.style.height = textarea.scrollHeight + "px";
        textarea.addEventListener("input", function () {
            if (
                !document
                    .querySelector(".full-form__first-screen")
                    .classList.contains("full-form__fullscreen")
            ) {
                this.style.height = "auto";
                this.style.height = this.scrollHeight + "px";
            }
        });
    }

    //NEW COMMENT
    const fullForm = document.querySelector(".comments__full-form");
    const activeForm = document.querySelectorAll(".comments__form");
    const fullFormNextBtn = document.querySelector(".full-form__next-btn");
    const fullFormBackBtn = document.querySelector(".full-form__back-btn");
    const fullFormConfirmBtn = document.querySelector(
        ".full-form__confirm-btn"
    );
    const fullFormConfirmAuthBtn = document.querySelector(
        ".full-form__confirm-btn-authenticated"
    );
    const formFirstScreen = document.querySelector(".full-form__first-screen");
    const formSecondScreen = document.querySelector(
        ".full-form__second-screen"
    );
    const formQuestionInput = document.querySelector(
        ".full-form__question-input"
    );
    const progressBar = document.querySelector(".full-form__progress");
    const formName = document.querySelector(".full-form__name");
    const formEmail = document.querySelector(".full-form__email");
    // const hiddenAnsWerId = document.querySelector('#hidden_answer_id');
    // const consultationCommentAnswerToAnswerId = document.querySelector('#sf_consultation_comment_answer_to_answer_id');
    const textareaFake = document.querySelector(".comments__textarea-fake");
    const newAnsWerButton = document.querySelectorAll(".comment__answ");
    const toAnswerId = document.querySelector("#to_answer_id");

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    let formQuestionInputLength = 0;
    let formValidation = { name: false, email: false };
    const progressBarTime = 10;

    //reset form before opening new
    const resetForm = (activeFake) => {
        textarea.value = "";
        textarea.style.height = textarea.scrollHeight + "px";
        if (
            !(
                activeFake.parentNode.getAttribute("data-id") ===
                textareaFake.parentNode.getAttribute("data-id")
            )
        ) {
            textareaFake.classList.remove("hide");
            textareaFake.disabled = false;
        }
        newAnsWerButton.forEach((element) => {
            if (
                !(
                    activeFake.parentNode.getAttribute("data-id") ===
                    element.parentNode.getAttribute("data-id")
                )
            ) {
                element.classList.remove("hide");
            }
        });
        activeForm.forEach((element) => {
            element.reset();
        });
        progressBar.style.setProperty("--pseudo-element-width", 0);
        formFirstScreen.classList.remove("hide");
        formSecondScreen.classList.add("hide");
        formValidation = { name: false, email: false };
    };

    //setting new form
    const setForm = (el, isFocused) => {
        resetForm(el);
        el == textareaFake
            ? (toAnswerId.disabled = true)
            : (toAnswerId.disabled = false);
        if (el.parentNode.getAttribute("data-id")) {
            toAnswerId.setAttribute(
                "value",
                el.parentNode.getAttribute("data-id")
            );
        } else {
            toAnswerId.setAttribute("value", "");
        }
        // if (bodyElement.classList.contains('user-authenticated')) {
        //   if (el.parentNode.getAttribute('data-id') !== null) {
        //     hiddenAnsWerId.setAttribute('value', el.parentNode.getAttribute('data-id'));
        //     consultationCommentAnswerToAnswerId.setAttribute('value', el.parentNode.getAttribute('data-id'));
        //   }
        //   el.classList.add('hide');
        //   el.disabled = true;
        //   el.insertAdjacentElement('afterend', fullForm);
        //   fullForm.classList.remove('hide');
        //   fullFormConfirmAuthBtn.classList.remove('hide');
        //   if (isFocused === true) formQuestionInput.focus();
        //   formName.disabled = true;
        //   formEmail.disabled = true;
        //   fullFormNextBtn.classList.add('hide');
        // }

        // else {
        // if (el.parentNode.getAttribute('data-id') !== null) {
        //   hiddenAnsWerId.setAttribute('value', el.parentNode.getAttribute('data-id'));
        //   consultationCommentAnswerToAnswerId.setAttribute('value', el.parentNode.getAttribute('data-id'));
        // }
        el.classList.add("hide");
        el.disabled = true;
        el.insertAdjacentElement("afterend", fullForm);
        fullForm.classList.remove("hide");
        if (isFocused === true) formQuestionInput.focus();
        // }
    };

    if (fullForm) {
        setForm(textareaFake, false);

        textareaFake.onclick = () => {
            setForm(textareaFake, true);
        };

        newAnsWerButton.forEach((el) => {
            el.onclick = () => {
                setForm(el, true);
            };
        });

        // progress bar and buttons visuals
        formQuestionInput.addEventListener("input", (event) => {
            formQuestionInputLength = event.target.value.length;
            if (formQuestionInputLength <= progressBarTime) {
                progressBar.style.setProperty(
                    "--pseudo-element-width",
                    `${(formQuestionInputLength / progressBarTime) * 100}%`
                );
            } else {
                progressBar.style.setProperty("--pseudo-element-width", `100%`);
            }
            if (bodyElement.classList.contains("user-authenticated")) {
                if (formQuestionInputLength >= progressBarTime) {
                    fullFormConfirmAuthBtn.classList.remove(
                        "full-form__confirm-btn-authenticated-unactive"
                    );
                    fullFormConfirmAuthBtn.classList.add(
                        "full-form__confirm-btn-authenticated-active"
                    );
                } else {
                    fullFormConfirmAuthBtn.classList.remove(
                        "full-form__confirm-btn-authenticated-active"
                    );
                    fullFormConfirmAuthBtn.classList.add(
                        "full-form__confirm-btn-authenticated-unactive"
                    );
                }
            } else {
                if (formQuestionInputLength >= progressBarTime) {
                    fullFormNextBtn.classList.remove(
                        "full-form__next-btn-unactive"
                    );
                    fullFormNextBtn.classList.add("full-form__next-btn-active");
                } else {
                    fullFormNextBtn.classList.remove(
                        "full-form__next-btn-active"
                    );
                    fullFormNextBtn.classList.add(
                        "full-form__next-btn-unactive"
                    );
                }
            }
        });

        //button next
        fullFormNextBtn.onclick = (event) => {
            event.preventDefault();
            if (formQuestionInputLength >= progressBarTime) {
                formFirstScreen.classList.add("hide");
                formSecondScreen.classList.remove("hide");
            }
        };
        //button back
        fullFormBackBtn.onclick = (event) => {
            event.preventDefault();
            formFirstScreen.classList.remove("hide");
            formSecondScreen.classList.add("hide");
        };

        //form email validation
        formEmail.addEventListener("input", (event) => {
            if (emailRegex.test(formEmail.value.trim())) {
                formValidation.email = true;
            } else {
                formValidation.email = false;
            }
            if (formValidation.name === true && formValidation.email === true) {
                fullFormConfirmBtn.classList.remove(
                    "full-form__confirm-btn-unactive"
                );
                fullFormConfirmBtn.classList.add(
                    "full-form__confirm-btn-active"
                );
            } else {
                fullFormConfirmBtn.classList.add(
                    "full-form__confirm-btn-unactive"
                );
                fullFormConfirmBtn.classList.remove(
                    "full-form__confirm-btn-active"
                );
            }
        });

        //form name validation
        formName.addEventListener("input", (event) => {
            if (formName.value.trim().length > 0) {
                formValidation.name = true;
            } else {
                formValidation.name = false;
            }
            if (formValidation.name === true && formValidation.email === true) {
                fullFormConfirmBtn.classList.remove(
                    "full-form__confirm-btn-unactive"
                );
                fullFormConfirmBtn.classList.add(
                    "full-form__confirm-btn-active"
                );
            } else {
                fullFormConfirmBtn.classList.add(
                    "full-form__confirm-btn-unactive"
                );
                fullFormConfirmBtn.classList.remove(
                    "full-form__confirm-btn-active"
                );
            }
        });

        //submit form
        fullFormConfirmBtn.onclick = (event) => {
            event.preventDefault();
            if (
                fullFormConfirmBtn.classList.contains(
                    "full-form__confirm-btn-active"
                )
            ) {
                fullFormConfirmBtn.closest(".comments__form").submit();
                fullFormConfirmBtn.closest(".comments__form").reset();
                setForm(textareaFake, false);
            }
        };

        fullFormConfirmAuthBtn.onclick = (event) => {
            event.preventDefault();
            if (
                fullFormConfirmAuthBtn.classList.contains(
                    "full-form__confirm-btn-authenticated-active"
                )
            ) {
                fullFormConfirmAuthBtn.closest(".comments__form").submit();
                fullFormConfirmAuthBtn.closest(".comments__form").reset();
                setForm(textareaFake, false);
            }
        };
    }

    /* КОММЕНТАРИИ В КОНСУЛЬТАЦИЯХ */

    /*ЛОГИН ВАЛИДАЦИЯ */
    const loginInputWrappes = document.querySelectorAll(
        ".popup-form__input-wrapper"
    );

    if (loginInputWrappes.length > 0) {
        loginInputWrappes.forEach((el) => {
            const label = el.querySelector(".popup-form__label");
            const input = el.querySelector(".popup-form__input");

            setTimeout(() => {
                console.log(input.value);
                if (input.value.trim()) {
                    label.classList.add("popup-form__label-active");
                }
            }, 100);

            // Обработчик фокуса
            input.addEventListener("focus", () => {
                label.classList.add("popup-form__label-active");
            });

            // Обработчик потери фокуса
            input.addEventListener("blur", () => {
                if (!input.value.trim()) {
                    label.classList.remove("popup-form__label-active");
                }
            });
        });
    }

    const checkAllInputs = (inputs) => {
        let isAllValid = true;
        for (let i = 0; i < inputs.length; i++) {
            if (inputs[i].value === "") isAllValid = false;
        }
        return isAllValid;
    };

    const avatarSubmit = document.querySelector(".popup-form__submit");

    const inputsValidation = document.querySelectorAll(
        '.popup-form__form input[type="text"], .popup-form__form input[type="password"]'
    );

    inputsValidation.forEach((el, key) => {
        el.addEventListener("input", function (event) {
            if (checkAllInputs(inputsValidation)) {
                avatarSubmit.classList.remove("popup-form__submit-disabled");
                avatarSubmit.disabled = false;
            } else {
                avatarSubmit.classList.add("popup-form__submit-disabled");
                avatarSubmit.disabled = true;
            }
        });
    });

    /*ЛОГИН ВАЛИДАЦИЯ */

    /*ЛОГИН ПОКАЗАТЬ/СКРЫТЬ ПАРОЛЬ */

    const avatarPassword = document.querySelector("#password");
    const hidePassword = document.querySelector(".popup-form__password-img");

    if (hidePassword) {
        hidePassword.onclick = () => {
            if (avatarPassword.type === "text")
                avatarPassword.type = "password";
            else if (avatarPassword.type === "password")
                avatarPassword.type = "text";
        };
    }

    /*ЛОГИН ПОКАЗАТЬ/СКРЫТЬ ПАРОЛЬ */

    /*ТОГГЛ */
    const checkbox = document.getElementById("answer_form");
    const switchTextOn = document.querySelector(".form-switch__on-text");
    const switchTextOff = document.querySelector(".form-switch__off-text");

    // Изначальное состояние текста
    if (switchTextOn && switchTextOff) {
        switchTextOn.style.visibility = checkbox.checked ? "visible" : "hidden";
        switchTextOff.style.visibility = checkbox.checked
            ? "hidden"
            : "visible";
    }

    if (checkbox) {
        checkbox.addEventListener("change", function () {
            switchTextOn.style.visibility = this.checked ? "visible" : "hidden";
            switchTextOff.style.visibility = this.checked
                ? "hidden"
                : "visible";
        });
    }

    /*ТОГГЛ */

    /*СЛАЙДЕР ОПЛАТА ОТЗЫВЫ  */

    const paymentSlides = document.querySelectorAll(
        ".payment-reviews__slide.payment-reviews-slide.swiper-slide"
    );
    const paymentSlidesWrapper = document.querySelector(
        ".payment-reviews__swiper-wrapper.swiper-wrapper"
    );

    const paymentSlider = new Swiper(".payment-reviews__slider", {
        speed: 0,
        allowTouchMove: false,
        breakpoints: {
            0: {
                slidesPerView: "auto",
                direction: "vertical",
                autoHeight: false,
                spaceBetween: 10,
            },
            540: {
                slidesPerView: "auto",
                autoHeight: false,
                direction: "vertical",
                spaceBetween: 10,
            },
            960: {
                slidesPerView: 2,
                direction: "horizontal",
                spaceBetween: "3%",
            },
        },
    });

    if (paymentSlidesWrapper) {
        document.fonts.ready.then(() => {
            paymentSlidesWrapper.style.maxHeight = `${
                paymentSlides[0].offsetHeight +
                paymentSlides[1].offsetHeight +
                8
            }px`;
        });
    }

    if (paymentSlider) {
        paymentSlider.on("slideChange", () => {
            if (window.innerWidth < 960) {
                let maxHeight = [0, 0];
                for (let i = 0; i < paymentSlides.length; i++) {
                    if (i == paymentSlider.activeIndex) {
                        maxHeight[0] = paymentSlides[i].offsetHeight;
                    }
                    if (i == paymentSlider.activeIndex + 1) {
                        maxHeight[1] = paymentSlides[i].offsetHeight;
                    }
                }
                paymentSlidesWrapper.style.maxHeight = `${
                    maxHeight[0] + maxHeight[1] + 8
                }px`;
            }
        });
    }

    if (document.querySelector(".payment-reviews__arrow-after")) {
        document
            .querySelector(".payment-reviews__arrow-after")
            .addEventListener("click", () => {
                // if (window.innerWidth > 960) {
                // Переход на два слайда вперед
                paymentSlider.slideTo(paymentSlider.activeIndex + 2);
                // } else {
                //   paymentSlider.slideNext();
                // }
            });
    }

    if (document.querySelector(".payment-reviews__arrow-before")) {
        document
            .querySelector(".payment-reviews__arrow-before")
            .addEventListener("click", () => {
                // if (window.innerWidth > 960) {
                // Переход на два слайда назад
                paymentSlider.slideTo(paymentSlider.activeIndex - 2);
                // } else {
                //   paymentSlider.slidePrev();
                // }
            });
    }

    /*СЛАЙДЕР ОПЛАТА ОТЗЫВЫ  */

    /* МАСКА ИНПУТА  */

    const phoneInputs = document.querySelectorAll(".promo__input-phone");

    if (phoneInputs.length > 0) {
        phoneInputs.forEach((phoneInput) => {
            // Устанавливаем начальное значение
            phoneInput.value = "+7-";

            phoneInput.addEventListener("input", function (event) {
                let input = phoneInput.value.replace(/\D/g, ""); // Удаляем все нечисловые символы, кроме "+7"

                // Проверка, чтобы +7 не стиралось
                if (!input.startsWith("7")) {
                    input = "7" + input; // Добавляем 7, если удалили
                }

                // Формируем маску с учётом префикса +7
                let formattedInput = "+7-";
                if (input.length > 1) {
                    formattedInput += input.substring(1, 4);
                }
                if (input.length >= 4) {
                    formattedInput += "-" + input.substring(4, 7);
                }
                if (input.length >= 7) {
                    formattedInput += "-" + input.substring(7, 9);
                }
                if (input.length >= 9) {
                    formattedInput += "-" + input.substring(9, 11);
                }

                // Сохраняем текущую позицию курсора
                let cursorPosition = phoneInput.selectionStart;

                // Обновляем значение поля
                phoneInput.value = formattedInput;

                // Восстанавливаем позицию курсора
                if (
                    event.inputType === "deleteContentBackward" &&
                    cursorPosition > 2
                ) {
                    phoneInput.setSelectionRange(
                        cursorPosition,
                        cursorPosition
                    );
                } else {
                    phoneInput.setSelectionRange(
                        phoneInput.value.length,
                        phoneInput.value.length
                    );
                }
            });
        });
    }

    /*МАСКА ИНПУТА  */

    /*ПРОВЕРКА НА ДОПОЛНИТЕЛЬНЫЕ ИНПУТЫ ТАРИФ */

    const promoItems = document.querySelectorAll(".promo__item");
    const additionalInputs = document.querySelectorAll(".promo__input");

    const clearAllPromoAdditionalInputs = () => {
        if (additionalInputs.length > 0) {
            additionalInputs.forEach((addInput) => {
                addInput.disabled = true;
            });
        }
    };

    if (promoItems.length > 0) {
        promoItems.forEach((promoItem) => {
            const localAdditionalInputs =
                promoItem.querySelectorAll(".promo__input");
            const radio = promoItem.querySelector(".promo__input-radio");

            clearAllPromoAdditionalInputs();

            radio.addEventListener("change", (event) => {
                if (event.target.checked) {
                    clearAllPromoAdditionalInputs();
                    if (localAdditionalInputs.length > 0) {
                        localAdditionalInputs.forEach((localAddInput) => {
                            localAddInput.disabled = false;
                        });
                    }
                }
            });
        });
    }

    /*ПРОВЕРКА НА ДОПОЛНИТЕЛЬНЫЕ ИНПУТЫ ТАРИФ */

    /*РАССЧЕТ СТОИМОСТИ ОПЛАТЫ */

    const calculateResult = () => {
        const amount = document.querySelector(".payment__amount-input:checked");
        const urgency = document.querySelector(
            ".payment__urgency-input:checked"
        );
        const options = document.querySelectorAll(
            ".form-switch__checkbox:checked"
        );

        const totalPriceInput = document.querySelector("#total_price");
        const totalPriceSpan = document.querySelector(".payment__result-price");

        if (amount && totalPriceInput && totalPriceSpan && urgency) {
            const tariffId = document.querySelector("#tariff_id");
            tariffId.value = amount.getAttribute("data-id");

            let optionsValue = 0;

            if (options.length > 0) {
                options.forEach((el) => {
                    optionsValue += +el.value;
                });
            }

            const totalValue = +amount.value + +urgency.value + +optionsValue;

            totalPriceInput.value = totalValue;
            totalPriceSpan.innerHTML = `${totalValue} ₽`;
        }
    };

    const calculateUrgency = () => {
        const totalPriceInput = document.querySelector(
            ".payment__amount-input:checked"
        );
        const urgencyBlock = document.querySelectorAll(
            ".payment__urgency-item"
        );
        if (urgencyBlock.length > 0 && totalPriceInput) {
            urgencyBlock.forEach((el) => {
                el.querySelector(".payment__urgency-title").innerHTML = `${
                    +totalPriceInput.value +
                    +el.querySelector(".payment__urgency-input").value
                } ₽`;
            });
        }
    };

    const setActiveRadio = (index, element) => {
        const totalInput = document.querySelectorAll(element);
        if (totalInput.length > 0) {
            totalInput.forEach((el) => {
                el.checked = false;
            });
            if (index != null) {
                totalInput[index].checked = true;
            }
        }
    };

    const activateAdditionalInput = (index) => {
        const inputs = document.querySelectorAll(
            ".payment-checkbox__additional-input-wrapper"
        );
        if (inputs.length > 0) {
            inputs.forEach((input) => {
                input.classList.add("payment-checkbox__hidden");
                input.querySelector(
                    ".payment-checkbox__additional-input"
                ).disabled = true;
            });
            if (index != null) {
                inputs[index].classList.remove("payment-checkbox__hidden");
                inputs[index].querySelector(
                    ".payment-checkbox__additional-input"
                ).disabled = false;
            }
        }
    };

    calculateResult();
    calculateUrgency();

    const amountList = document.querySelectorAll(".payment__amount-input");
    const urgencyList = document.querySelectorAll(".payment__urgency-input");
    const optionsList = document.querySelectorAll(".form-switch__checkbox");
    const optionsListConnect = document.querySelectorAll(
        ".form-switch__checkbox-connect"
    );
    const phoneAdditionalInput = document.querySelector("#phone-input");

    if (phoneAdditionalInput) {
        // Подставляем +7 при фокусе
        phoneAdditionalInput.addEventListener("focus", (e) => {
            if (phoneAdditionalInput.value === "") {
                phoneAdditionalInput.value = "+7-"; // Устанавливаем начальное значение
            }
        });

        // Форматирование ввода
        phoneAdditionalInput.addEventListener("input", (e) => {
            let value = phoneAdditionalInput.value.replace(/\D/g, ""); // Убираем всё, кроме цифр
            let formattedValue = "+7";

            if (value.length > 1) formattedValue += "-" + value.substring(1, 4);
            if (value.length > 4) formattedValue += "-" + value.substring(4, 7);
            if (value.length > 7) formattedValue += "-" + value.substring(7, 9);
            if (value.length > 9)
                formattedValue += "-" + value.substring(9, 11);

            phoneAdditionalInput.value = formattedValue;
        });

        // Убираем лишние символы на blur
        phoneAdditionalInput.addEventListener("blur", (e) => {
            if (phoneAdditionalInput.value === "+7-") {
                phoneAdditionalInput.value = ""; // Очищаем поле, если оно не заполнено
            }
        });
    }

    if (amountList.length > 0) {
        amountList.forEach((el) => {
            el.addEventListener("change", () => {
                calculateResult();
                calculateUrgency();
                activateAdditionalInput(null);
                setActiveRadio(null, ".form-switch__checkbox-connect");
                const tariffId = document.querySelector("#tariff_id");
                tariffId.value = el.getAttribute("data-id");
            });
        });
    }

    if (urgencyList.length > 0) {
        urgencyList.forEach((el) => {
            el.addEventListener("change", () => {
                calculateResult();
                calculateUrgency();
            });
        });
    }

    if (optionsList.length > 0) {
        optionsList.forEach((el) => {
            el.addEventListener("change", () => {
                calculateResult();
                calculateUrgency();
            });
        });
    }

    if (optionsListConnect.length > 0) {
        optionsListConnect.forEach((option, key) => {
            option.addEventListener("change", () => {
                setActiveRadio(0, ".payment__amount-input");
                if (option.checked) {
                    activateAdditionalInput(key);
                    setActiveRadio(key, ".form-switch__checkbox-connect");
                } else {
                    activateAdditionalInput(null);
                    setActiveRadio(null, ".form-switch__checkbox-connect");
                }
                calculateResult();
                calculateUrgency();
            });
        });
    }

    /*РАССЧЕТ СТОИМОСТИ ОПЛАТЫ */

    /*ЛАЙКИ */

    const likeComments = document.querySelectorAll(
        ".comment__main-comment, .comment__sub-comment"
    );
    const csrfToken = document
        .querySelector('meta[name="csrf-token"]')
        .getAttribute("content");

    const actionLike = (likesAmount, likeImg, url, state, type) => {
        const currentUrl = window.location.href;
        const segments = currentUrl.split("/");
        const slug = segments[segments.length - 1];
        if (type === "like") {
            if (state === 1) {
                likesAmount.innerHTML = +likesAmount.innerHTML + 1;
                likeImg
                    .querySelector("use")
                    .setAttribute("xlink:href", "#like_filled_2ff7--react");
            }
            if (state === 0) {
                likesAmount.innerHTML = +likesAmount.innerHTML - 1;
                likeImg
                    .querySelector("use")
                    .setAttribute("xlink:href", "#like_3e48--react");
            }
        }
        if (type === "dislike") {
            if (state === 1) {
                likeImg
                    .querySelector("use")
                    .setAttribute("xlink:href", "#dislike_filled_56bd--react");
            }
            if (state === 0) {
                likeImg
                    .querySelector("use")
                    .setAttribute("xlink:href", "#dislike_5d1d--react");
            }
        }
        if (csrfToken) {
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": csrfToken,
                },
                body: JSON.stringify({
                    state: +state,
                    slug: +slug,
                }),
            })
                .then(async (response) => {
                    if (response.ok) {
                    } else {
                        const errorText = await response.text();
                        console.error("Ошибка при отправке POST-запроса:", {
                            status: response.status,
                            statusText: response.statusText,
                            url,
                            errorText,
                        });
                    }
                })
                .catch((error) => {
                    console.error("Ошибка сети или другая проблема:", {
                        message: error.message,
                        stack: error.stack,
                        url,
                    });
                });
        }
    };

    if (likeComments.length > 0) {
        likeComments.forEach((comment) => {
            const likelink = comment.querySelector(".comment__like-link");
            const dislikelink = comment.querySelector(".comment__dislike-link");
            const likesAmount = comment.querySelector(".comment__like-amount");
            const likeImg = comment.querySelector(".comment__like-img");
            const dislikeImg = comment.querySelector(".comment__dislike-img");

            likelink.addEventListener("click", function (event) {
                event.preventDefault();
                if (
                    !(
                        likeImg
                            .querySelector("use")
                            .getAttribute("xlink:href") ===
                        "#like_filled_2ff7--react"
                    )
                ) {
                    if (
                        dislikeImg
                            .querySelector("use")
                            .getAttribute("xlink:href") ===
                        "#dislike_filled_56bd--react"
                    ) {
                        actionLike(
                            likesAmount,
                            dislikeImg,
                            dislikelink.href,
                            0,
                            "dislike"
                        );
                    }
                    actionLike(likesAmount, likeImg, likelink.href, 1, "like");
                } else {
                    actionLike(likesAmount, likeImg, likelink.href, 0, "like");
                }
            });

            dislikelink.addEventListener("click", function (event) {
                event.preventDefault();
                if (
                    !(
                        dislikeImg
                            .querySelector("use")
                            .getAttribute("xlink:href") ===
                        "#dislike_filled_56bd--react"
                    )
                ) {
                    if (
                        likeImg
                            .querySelector("use")
                            .getAttribute("xlink:href") ===
                        "#like_filled_2ff7--react"
                    ) {
                        actionLike(
                            likesAmount,
                            likeImg,
                            likelink.href,
                            0,
                            "like"
                        );
                    }
                    actionLike(
                        likesAmount,
                        dislikeImg,
                        dislikelink.href,
                        1,
                        "dislike"
                    );
                } else {
                    actionLike(
                        likesAmount,
                        dislikeImg,
                        dislikelink.href,
                        0,
                        "dislike"
                    );
                }
            });
        });
    }

    /*ЛАЙКИ */

    /* ДЕЙСТВИЯ КОНСУЛЬТАЦИИ */

    const menuPostAction = (csrfToken, url, body, isReload) => {
        if (csrfToken) {
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": csrfToken,
                },
                body: JSON.stringify(body),
            })
                .then(async (response) => {
                    if (response.ok) {
                        if (isReload) {
                            window.location.reload();
                        }
                    } else {
                        const errorText = await response.text();
                        console.error("Ошибка при отправке POST-запроса:", {
                            status: response.status,
                            statusText: response.statusText,
                            url,
                            errorText,
                        });
                    }
                })
                .catch((error) => {
                    console.error("Ошибка сети или другая проблема:", {
                        message: error.message,
                        stack: error.stack,
                        url,
                    });
                });
        }
    };

    // const requestDoc = document.querySelector('.small-menu__link-doc');

    // if (requestDoc) {
    //   const url = window.location.href;
    //   const segments = url.split('/');
    //   const consultationId = segments[segments.length - 1];
    //   requestDoc.onclick = (e) => {
    //     e.preventDefault();
    //     console.log(requestDoc.href);
    //     // menuPostAction(csrfToken, requestDoc.href, { 'id': +consultationId }, true)
    //   }
    // }

    /* ДЕЙСТВИЯ КОНСУЛЬТАЦИИ */

    /*МЕНЮ КОММЕНТАРИЯ */

    const menuCommentBlock = document.querySelector(
        ".comment-menu__button-block"
    );
    const menuCommentUnlock = document.querySelector(
        ".comment-menu__button-unlock"
    );
    const menuContents = document.querySelector(".comment-menu__button-add");

    if (menuCommentBlock) {
        menuCommentBlock.onclick = (e) => {
            e.preventDefault();
            if (confirm("Заблокировать?")) {
                menuPostAction(
                    csrfToken,
                    menuCommentBlock.href,
                    { id: +menuCommentBlock.getAttribute("data-id") },
                    true
                );
            }
        };
    }

    if (menuCommentUnlock) {
        menuCommentUnlock.onclick = (e) => {
            e.preventDefault();
            menuPostAction(
                csrfToken,
                menuCommentUnlock.href,
                { id: +menuCommentUnlock.getAttribute("data-id") },
                true
            );
        };
    }

    if (menuContents) {
        menuContents.onclick = (e) => {
            e.preventDefault();
            menuPostAction(
                csrfToken,
                menuCommentBlock.href,
                { id: +menuCommentBlock.getAttribute("data-id") },
                true
            );
        };
    }

    /*МЕНЮ КОММЕНТАРИЯ */

    /*ТАБЫ КАТЕГОРИИ */

    (() => {
        const buttons = document.querySelectorAll(".category-info__tab");
        const contents = document.querySelectorAll(
            ".category-info__tab-content"
        );

        if (buttons.length > 0 && contents.length > 0) {
            buttons.forEach((button) => {
                button.addEventListener("click", function () {
                    const tabId = this.getAttribute("data-tab");
                    buttons.forEach((btn) =>
                        btn.classList.remove("category-info__tab--active")
                    );
                    contents.forEach((content) =>
                        content.classList.remove(
                            "category-info__tab-content--active"
                        )
                    );

                    this.classList.add("category-info__tab--active");
                    document
                        .getElementById(`tab-${tabId}`)
                        .classList.add("category-info__tab-content--active");
                });
            });
        }
    })();

    /*ТАБЫ КАТЕГОРИИ */

    /*ФИЛЬТР АЛФАВИТ КАТЕГОРИИ */

    const catFilterItem = document.querySelectorAll(".themes__sort-item");
    const catFilterLetter = document.querySelectorAll(".themes__item");

    const addCloseBtn = (element) => {
        const closeBtn = `
      <div class="themes__close-btn"></div>
    `;
        element.insertAdjacentHTML("beforeend", closeBtn);
        const delEl = document.querySelector(".themes__close-btn");
        delEl.addEventListener("click", (event) => {
            event.stopPropagation(); // Останавливаем всплытие события
            shawAllCategories();
            delEl.remove();
        });
    };

    const shawAllCategories = () => {
        if (catFilterItem.length > 0) {
            catFilterItem.forEach((el) => {
                el.classList.remove("themes__sort-item--active");
            });
        }
        const categories = document.querySelectorAll(".themes__subitem");
        if (categories.length > 0) {
            categories.forEach((el) => {
                el.classList.remove("hide");
            });
        }
    };

    const isCategotyEmpty = (letterItem, number) => {
        letterItem.classList.remove("hide");
        const themes = letterItem.querySelectorAll(".themes__subitem");

        let isEmpty = true;
        themes.forEach((theme) => {
            theme.classList.add("hide");
            if (+theme.getAttribute("data-sort-target") == number) {
                theme.classList.remove("hide");
                isEmpty = false;
            }
        });
        if (isEmpty) {
            letterItem.classList.add("hide");
        }
    };

    const removeActive = (item) => {
        item.forEach((el) => {
            el.classList.remove("themes__sort-item--active");
        });
    };

    if (catFilterItem.length > 0) {
        catFilterItem.forEach((el) => {
            el.onclick = () => {
                removeActive(catFilterItem);
                el.classList.add("themes__sort-item--active");
                const delEl = document.querySelector(".themes__close-btn");
                if (delEl) {
                    delEl.remove();
                }
                addCloseBtn(el);
                const num = el.getAttribute("data-sort-btn");
                if (catFilterLetter.length > 0) {
                    catFilterLetter.forEach((el) => {
                        isCategotyEmpty(el, num);
                    });
                }
            };
        });
    }

    /*ФИЛЬТР АЛФАВИТ КАТЕГОРИИ */

    /*ОТКРЫТИЕ ЧАТА С ПАРСИНГОМ ДАННЫХ СО СТРАНИЦЫ*/

    const categoryCard = document.querySelectorAll(".category-card");
    const userBlock = document.querySelector(".user-block");
    const chatWrapper = document.querySelector(".chat__wrapper");
    const chatFullname = document.querySelector(".chat__fullname");
    const chatAvatar = document.querySelector(".chat__avatar-img");

    if (categoryCard.length > 0) {
        categoryCard.forEach((card) => {
            const msgButtons = card.querySelectorAll(".category-card__msg");
            const fullname = card.querySelector(".category-card__fullname");
            const avatar = card.querySelector(".category-card__avatar");
            if (msgButtons.length > 0) {
                msgButtons.forEach((btn) => {
                    btn.onclick = (e) => {
                        e.preventDefault();
                        if (fullname && avatar) {
                            if (chatWrapper) {
                                chatWrapper.classList.add(
                                    "chat__wrapper--active"
                                );
                                chatFullname.innerHTML = fullname.innerHTML;
                                chatAvatar.setAttribute(
                                    "src",
                                    avatar.getAttribute("src")
                                );
                            }
                        }
                    };
                });
            }
        });
    }
    if (userBlock) {
        const msgButton = userBlock.querySelector(".profile-buttons__button");
        const fullname = userBlock.querySelector(".user-block__fullname");
        const avatar = userBlock.querySelector(".user-block__avatar");
        if (msgButton) {
            msgButton.onclick = (e) => {
                e.preventDefault();
                if (fullname && avatar) {
                    if (chatWrapper) {
                        chatWrapper.classList.add("chat__wrapper--active");
                        chatFullname.innerHTML = fullname.innerHTML;
                        chatAvatar.setAttribute(
                            "src",
                            avatar.getAttribute("src")
                        );
                    }
                }
            };
        }
    }

    /*ОТКРЫТИЕ ЧАТА С ПАРСИНГОМ ДАННЫХ СО СТРАНИЦЫ*/

    /*ЗАКРЫТИЕ ЧАТА */

    const chatCloseBtn = document.querySelector(".chat__close");

    if (chatCloseBtn) {
        chatCloseBtn.onclick = () => {
            chatWrapper.classList.remove("chat__wrapper--active");
        };
    }

    /*ЗАКРЫТИЕ ЧАТА */

    /*СМЕНА ЭКРАНОВ ЧАТА */

    const chatForm = document.querySelector("#chat-form");
    const chatNextButton = document.querySelector("#button-next");
    const chatPrevButton = document.querySelector("#button-prev");
    const chatSubmitButton = document.querySelector("#button-submit");
    const chatBody = document.querySelector(".chat__body");
    const chatAdditionalFields = document.querySelector(
        ".chat__additional-fields"
    );
    const chatFooterSecond = document.querySelector(".chat__footer-second");

    if (
        chatNextButton &&
        chatBody &&
        chatAdditionalFields &&
        chatFooterSecond
    ) {
        chatNextButton.onclick = () => {
            if (
                chatNextButton.classList.contains(
                    "chat__button-continue--active"
                )
            ) {
                chatBody.classList.add("hide");
                chatAdditionalFields.classList.remove("hide");
                chatFooterSecond.classList.remove("hide");
            }
        };
    }

    if (
        chatPrevButton &&
        chatBody &&
        chatAdditionalFields &&
        chatFooterSecond
    ) {
        chatPrevButton.onclick = () => {
            chatBody.classList.remove("hide");
            chatAdditionalFields.classList.add("hide");
            chatFooterSecond.classList.add("hide");
        };
    }

    if (chatSubmitButton) {
        chatSubmitButton.onclick = () => {
            chatForm.submit();
        };
    }

    /*СМЕНА ЭКРАНОВ ЧАТА */

    /*ВАЛИДАЦИЯ ЧАТА*/

    const chatTextarea = document.querySelector(".chat__question");

    if (chatTextarea) {
        chatTextarea.addEventListener("input", () => {
            // chatTextarea.style.height = "auto";
            // chatTextarea.style.height = chatTextarea.scrollHeight + "px";
            if (chatTextarea.value.length > 10) {
                chatNextButton.classList.add("chat__button-continue--active");
            } else {
                chatNextButton.classList.remove(
                    "chat__button-continue--active"
                );
            }
        });
    }

    /*ВАЛИДАЦИЯ ЧАТА*/

    /*СЛАЙДЕР СПИСОК ЭКСПЕРТОВ */

    document.addEventListener("DOMContentLoaded", function () {
        const wrapper = document.querySelector(".experts-list__wrapper");
        if (wrapper) {
            const expertsSlider = new Swiper(wrapper, {
                navigation: {
                    prevEl: ".experts-list__slider-button--prev",
                    nextEl: ".experts-list__slider-button--next",
                },
            });
        }
    });

    /*СЛАЙДЕР СПИСОК ЭКСПЕРТОВ */

    /*ТЕМНАЯ ТЕМА ЧАТ*/

    const themeBtn = document.querySelector("#theme");
    const body = document.querySelector("body");
    const themeLight = document.querySelector("#theme-light");
    const themeDark = document.querySelector("#theme-dark");

    if (themeBtn && themeLight && themeDark) {
        themeBtn.addEventListener("click", () => {
            if (!body.classList.contains("theme-dark")) {
                body.classList.add("theme-dark");
                themeLight.classList.add("hide");
                themeDark.classList.remove("hide");
            } else {
                body.classList.remove("theme-dark");
                themeLight.classList.remove("hide");
                themeDark.classList.add("hide");
            }
        });
    }

    /*ТЕМНАЯ ТЕМА ЧАТ*/

    /*ОТКРЫТИЕ ЧАТА  */

    const sidebarItem = document.querySelectorAll(".chat-sidebar__item");
    const chatMainBlock = document.querySelector(".full-chat__main-wrapper");
    const chatBackBtn = document.querySelector(".chat-header__back-btn");

    if (sidebarItem.length > 0 && chatMainBlock && chatBackBtn) {
        const isChatOpened = localStorage.getItem("isChatOpened");

        sidebarItem.forEach((el) => {
            if (isChatOpened) {
                if (isChatOpened == "true") {
                    chatMainBlock.classList.add(
                        "full-chat__main-wrapper--show"
                    );
                    el.classList.add("chat-sidebar__item--active");
                }
            }

            el.addEventListener("click", () => {
                chatMainBlock.classList.add("full-chat__main-wrapper--show");
                el.classList.add("chat-sidebar__item--active");
                localStorage.setItem("isChatOpened", true);
            });
        });

        chatBackBtn.addEventListener("click", () => {
            chatMainBlock.classList.remove("full-chat__main-wrapper--show");
            localStorage.setItem("isChatOpened", false);
        });
    }

    /*ОТКРЫТИЕ ЧАТА */

    /*ТОСТ ЧАТА */

    const toast = document.querySelector("#toast");
    const chatSubmit = document.querySelector(".chat-bottom__button");
    const newChatTextarea = document.querySelector(".chat-bottom__textarea");
    let hideTimeoutId; // Переменная для хранения ID таймера

    if (toast && chatSubmit && newChatTextarea) {
        chatSubmit.addEventListener("click", () => {
            showToast(toast);
        });

        newChatTextarea.addEventListener("keydown", (event) => {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                showToast(toast);
            }
        });

        const showToast = (toast) => {
            if (toast) {
                // Показываем тост с задержкой
                setTimeout(() => {
                    toast
                        .querySelector(".toast__container")
                        .classList.add("toast__show");
                }, 100);

                // Если уже есть запущенный таймер скрытия, очищаем его
                if (hideTimeoutId) {
                    clearTimeout(hideTimeoutId);
                }

                // Устанавливаем новый таймер скрытия тоста через 5 секунд
                hideTimeoutId = setTimeout(hideToast, 5000);
            }
        };

        const hideToast = () => {
            const toast = document.getElementById("toast");
            if (toast) {
                toast
                    .querySelector(".toast__container")
                    .classList.remove("toast__show");
                hideTimeoutId = null; // Сбрасываем ID таймера
            }
        };
    }

    /*ТОСТ ЧАТА */

    /*ВОПРОСЫ АККОРДЕОН */

    document.querySelectorAll(".question").forEach((question) => {
        question.addEventListener("click", function () {
            const answerWrapper = this.querySelector(
                ".question__answer-wrapper"
            );
            if (this.classList.contains("question__opened")) {
                // Animate collapse
                answerWrapper.style.maxHeight = `${
                    answerWrapper.scrollHeight + 20
                }px`;
                answerWrapper.style.paddingTop = `0`;
                setTimeout(() => {
                    answerWrapper.style.maxHeight = "0";
                    this.classList.remove("question__opened");
                }, 0);
            } else {
                // Animate expansion
                this.classList.add("question__opened");
                answerWrapper.style.maxHeight = `${
                    answerWrapper.scrollHeight + 20
                }px`;
                answerWrapper.style.paddingTop = `20px`;
                setTimeout(() => {
                    answerWrapper.style.maxHeight = "none";
                }, 300); // Duration should match the transition time
            }
        });
    });

    /*ВОПРОСЫ АККОРДЕОН */

    // /*ФОРМА СПЕЦИАЛИСТЫ */

    // const consultantFree = document.querySelector("#free-specialist");
    // const consultantFormLeftList = document.querySelector(
    //     ".consultants-form__left-list"
    // );
    // const consultantFormRightList = document.querySelector(
    //     ".consultants-form__right-list"
    // );
    // const consultantFormBackBtn = document.querySelector(
    //     ".consultants-form__back-btn"
    // );
    // const consultantOpenListBtn = document.querySelector("#specialists-list");
    // const specialistsList = document.querySelector(
    //     ".consultants-form__specialists"
    // );
    // const specialistsLinks = document.querySelectorAll(
    //     ".consultants-form__specialist-link"
    // );
    // const activeSpecialistWrapper = document.querySelector(
    //     ".consultants-form__active-specialist-wrapper"
    // );
    // const specialistHiddenInput = document.querySelector("#specialist-id");

    // if (consultantOpenListBtn && specialistsList) {
    //     consultantOpenListBtn.addEventListener("click", () => {
    //         if (
    //             !consultantOpenListBtn.classList.contains(
    //                 "consultants-form__category--active"
    //             )
    //         ) {
    //             specialistsList.style.height = `${specialistsList.scrollHeight}px`;
    //             consultantOpenListBtn.classList.add(
    //                 "consultants-form__category--active"
    //             );
    //         } else {
    //             specialistsList.style.height = `0`;
    //             consultantOpenListBtn.classList.remove(
    //                 "consultants-form__category--active"
    //             );
    //         }
    //     });
    // }

    // if (
    //     consultantFree &&
    //     consultantFormLeftList &&
    //     consultantFormRightList &&
    //     consultantFormBackBtn &&
    //     specialistHiddenInput &&
    //     specialistsLinks.length > 0
    // ) {
    //     specialistsLinks.forEach((el) => {
    //         el.addEventListener("click", (event) => {
    //             event.preventDefault();
    //             activeSpecialistWrapper.innerHTML = el.outerHTML;
    //             specialistHiddenInput.setAttribute(
    //                 "value",
    //                 el.getAttribute("data-id")
    //             );
    //             console.log(el.getAttribute("data-id"));
    //         });
    //     });
    //     consultantFree.addEventListener("click", () => {
    //         activeSpecialistWrapper.innerHTML = specialistsLinks[0].outerHTML;
    //         specialistHiddenInput.setAttribute(
    //             "value",
    //             specialistsLinks[0].getAttribute("data-id")
    //         );
    //     });
    //     if (window.innerWidth < 768) {
    //         consultantFree.addEventListener("click", () => {
    //             consultantFormLeftList.style.transform = `translateX(-100%)`;
    //             consultantFormRightList.style.transform = `translateX(-100%)`;
    //         });
    //         specialistsLinks.forEach((el) => {
    //             el.addEventListener("click", (event) => {
    //                 event.preventDefault();
    //                 consultantFormLeftList.style.transform = `translateX(-100%)`;
    //                 consultantFormRightList.style.transform = `translateX(-100%)`;
    //                 activeSpecialistWrapper.innerHTML = el.outerHTML;
    //             });
    //         });
    //         consultantFormBackBtn.addEventListener("click", () => {
    //             consultantFormLeftList.style.transform = ``;
    //             consultantFormRightList.style.transform = ``;
    //         });
    //     }
    // }

    // /*ФОРМА СПЕЦИАЛИСТЫ */

    /*ПОПАП СПЕЦИАЛИСТЫ */

    const openConsultantsPopupBtn =
        document.querySelector("#consultants-pupup");
    const consultantsPopup = document.querySelector(
        ".consultants-pupup__wrapper"
    );
    const consultatnsOverlay = document.querySelector(
        ".consultants-pupup__overlay"
    );
    const closeConsultantsPopupBtn = document.querySelector(
        ".consultants-pupup__close"
    );
    const consultantPopupCategory = document.querySelectorAll(
        ".consultants-pupup__category"
    );
    const consultantPopupLeftList = document.querySelector(
        ".consultants-pupup__left-list"
    );
    const consultantPopupRightList = document.querySelector(
        ".consultants-pupup__right-list"
    );
    const consultantPopupBackBtn = document.querySelector(
        ".consultants-pupup__back-btn"
    );

    if (
        openConsultantsPopupBtn &&
        consultantsPopup &&
        consultatnsOverlay &&
        closeConsultantsPopupBtn
    ) {
        openConsultantsPopupBtn.addEventListener("click", () => {
            consultantsPopup.style.display = "flex";
            consultatnsOverlay.style.display = "block";
            document.querySelector("body").style.overflow = "hidden";
            setTimeout(() => {
                consultantsPopup.style.opacity = "1";
                consultatnsOverlay.style.opacity = "1";
            }, 0);
        });
        consultatnsOverlay.addEventListener("click", () => {
            consultantsPopup.style.opacity = "0";
            consultatnsOverlay.style.opacity = "0";
            setTimeout(() => {
                consultantsPopup.style.display = "none";
                consultatnsOverlay.style.display = "none";
                document.querySelector("body").style.overflow = "";
            }, 200);
        });
        closeConsultantsPopupBtn.addEventListener("click", () => {
            consultantsPopup.style.opacity = "0";
            consultatnsOverlay.style.opacity = "0";
            setTimeout(() => {
                consultantsPopup.style.display = "none";
                consultatnsOverlay.style.display = "none";
                document.querySelector("body").style.overflow = "";
            }, 200);
        });
    }

    if (
        consultantPopupCategory.length > 0 &&
        consultantPopupLeftList &&
        consultantPopupRightList &&
        consultantPopupBackBtn
    ) {
        if (window.innerWidth < 768) {
            consultantPopupCategory.forEach((el) => {
                el.addEventListener("click", () => {
                    consultantPopupLeftList.style.transform = `translateX(-100%)`;
                    consultantPopupRightList.style.transform = `translateX(-100%)`;
                });
            });
            consultantPopupBackBtn.addEventListener("click", () => {
                consultantPopupLeftList.style.transform = ``;
                consultantPopupRightList.style.transform = ``;
            });
        }
    }

    /*ПОПАП СПЕЦИАЛИСТЫ */

    /*СЛАЙДЕР ОТЗЫВЫ */
    const reviewsSlider = new Swiper(".reviews-slider__slider", {
        spaceBetween: 20,
        slidesPerView: "auto",
    });
    /*СЛАЙДЕР ОТЗЫВЫ */

    /*ТАБЫ МЕТОД ОПЛАТЫ */

    const paymentMethodInputs = document.querySelectorAll(
        ".payment-method__radio-input"
    );
    const paymentMethodLists = document.querySelectorAll(
        ".payment-method__list"
    );

    if (paymentMethodInputs.length > 0 && paymentMethodLists.length > 0) {
        paymentMethodLists.forEach((el) => {
            el.style.display = "none";
        });
        paymentMethodLists[0].style.display = "flex";
        paymentMethodInputs.forEach((el) => {
            el.addEventListener("change", () => {
                paymentMethodLists.forEach((innerEl) => {
                    innerEl.style.display = "none";
                    if (
                        el.getAttribute("id") == innerEl.getAttribute("data-id")
                    )
                        innerEl.style.display = "flex";
                });
            });
        });
    }

    /*ТАБЫ МЕТОД ОПЛАТЫ */

    /*ФИЛЬТР ОТЗЫВОВ */

    const reviewCategoryTabs = document.querySelectorAll(
        ".reviews-header__tab"
    );
    const reviewStarsInputs = document.querySelectorAll(
        ".reviews-header__input"
    );
    const reviewItems = document.querySelectorAll(".new-reviews__item");

    let activeCategory = null;
    let activeStars = null;

    const getAttr = (el, name) => el.getAttribute(name);

    const clearCategoryActive = () => {
        reviewCategoryTabs.forEach((tab) =>
            tab.classList.remove("reviews-header__tab--active")
        );
    };

    const filterReviews = () => {
        reviewItems.forEach((item) => {
            const itemCategory = getAttr(item, "data-category");
            const itemStars = getAttr(item, "data-stars");

            const matchCategory =
                !activeCategory ||
                activeCategory === "All" ||
                itemCategory === activeCategory;
            const matchStars = !activeStars || itemStars === activeStars;

            item.style.display = matchCategory && matchStars ? "flex" : "none";
        });
    };

    if (reviewCategoryTabs.length > 0 && reviewStarsInputs.length > 0) {
        reviewCategoryTabs.forEach((tab) => {
            tab.addEventListener("click", () => {
                clearCategoryActive();
                tab.classList.add("reviews-header__tab--active");
                activeCategory = getAttr(tab, "data-value") || null;
                filterReviews();
            });
        });

        reviewStarsInputs.forEach((input) => {
            input.addEventListener("click", function () {
                if (activeStars === this.value) {
                    this.checked = false;
                    activeStars = null;
                } else {
                    activeStars = this.value;
                }

                reviewStarsInputs.forEach((el) => {
                    if (el !== this) el.checked = false;
                });

                filterReviews();
            });
        });
    }

    /*ФИЛЬТР ОТЗЫВОВ */

    /*РАЗМЕР ИНПУТА ПО СОДЕРЖИМОМУ */

    function resizeInput(input) {
        const mirror = input.parentNode.querySelector(".receipt__input-mirror");
        mirror.textContent = input.value || input.placeholder || "";
        input.style.width = mirror.scrollWidth + 4 + "px";
    }

    // вызов при загрузке, если есть value
    const resizableInput = document.querySelector(".receipt__price");
    if (resizableInput) {
        resizeInput(resizableInput);
        resizableInput.addEventListener("input", function () {
            resizeInput(this);
        });
    }

    /*РАЗМЕР ИНПУТА ПО СОДЕРЖИМОМУ */

    /*ЧЕК */
    const receptionTotalPriceInput = document.querySelector(
        ".receipt__total-price"
    );
    const receptionPriceInput = document.querySelector(".receipt__price");
    const receptionCheckbox = document.querySelector(
        "#checkbox_1.receipt__checkbox"
    );
    const receptionCheckbox2 = document.querySelector(
        "#checkbox_2.receipt__checkbox"
    );
    const receiptCheckbox2Value = document.querySelector(
        ".receipt__checkbox2-value"
    );
    const receiptComission = document.querySelector(".receipt__comission");
    const receiptCustonPriceBtn = document.querySelector(
        ".receipt__custom-price-btn"
    );
    const receiptMinimalPriceElement = document.querySelector(
        ".receipt__minimal-price"
    );
    const receiptMinimalPrice = receiptMinimalPriceElement
        ? receiptMinimalPriceElement.value
        : 0;
    const receiptBasicPrice = document.querySelector(".receipt__basic-price");

    const calculateReceiptPrice = () => {
        let comission = 0,
            additionalValue = 0;
        if (receptionCheckbox) {
            comission = receptionCheckbox.checked
                ? (+receiptBasicPrice.value / 100) * +receiptComission.value
                : 0;
        }
        if (receptionCheckbox2) {
            additionalValue = receptionCheckbox2.checked
                ? +receiptCheckbox2Value.value
                : 0;
        }
        receptionTotalPriceInput.setAttribute(
            "value",
            +receiptBasicPrice.value + additionalValue + comission
        );
        return +receiptBasicPrice.value + additionalValue + comission;
    };

    if (
        receptionTotalPriceInput &&
        receptionPriceInput &&
        receiptCustonPriceBtn &&
        receiptBasicPrice
    ) {
        receptionTotalPriceInput.value = receptionPriceInput.value;
        receiptBasicPrice.value = receptionPriceInput.value;
        if (receptionCheckbox && receiptComission) {
            receptionCheckbox.addEventListener("change", function (e) {
                if (
                    !receiptCustonPriceBtn.classList.contains(
                        "receipt__custom-price-btn--active"
                    )
                ) {
                    receptionPriceInput.value = calculateReceiptPrice();
                    resizeInput(receptionPriceInput);
                } else {
                    e.preventDefault();
                    receptionCheckbox.checked = false;
                }
            });
        }
        if (receptionCheckbox2 && receiptCheckbox2Value) {
            receptionCheckbox2.addEventListener("change", function () {
                if (
                    !receiptCustonPriceBtn.classList.contains(
                        "receipt__custom-price-btn--active"
                    )
                ) {
                    receptionPriceInput.value = calculateReceiptPrice();
                    resizeInput(receptionPriceInput);
                } else {
                    e.preventDefault();
                    receptionCheckbox2.checked = false;
                }
            });
        }
        receiptCustonPriceBtn.addEventListener("click", function () {
            if (
                !receiptCustonPriceBtn.classList.contains(
                    "receipt__custom-price-btn--active"
                )
            ) {
                receptionPriceInput.readOnly = false;
                receptionPriceInput.value = "";
                resizeInput(receptionPriceInput);
                receiptCustonPriceBtn.classList.add(
                    "receipt__custom-price-btn--active"
                );
                receptionCheckbox2.checked = false;
                receptionCheckbox.checked = false;
                receptionPriceInput.value = 0;
                // receptionPriceInput.value = calculateReceiptPrice();
                receiptCustonPriceBtn.innerText = "Сохранить";
            } else {
                if (+receptionPriceInput.value < +receiptMinimalPrice) {
                    receptionPriceInput.value = receiptMinimalPrice;
                }
                receptionPriceInput.readOnly = true;
                resizeInput(receptionPriceInput);
                receiptBasicPrice.value = receptionPriceInput.value;
                receiptCustonPriceBtn.classList.remove(
                    "receipt__custom-price-btn--active"
                );

                receptionTotalPriceInput.setAttribute(
                    "value",
                    receptionPriceInput.value
                );
                receiptCustonPriceBtn.innerText = "Ввести свою сумму";
            }
        });
    }
    /*ЧЕК */
    /* ТАБЫ ПРОФИЛЬ ВРАЧА */

    const tabs = document.querySelectorAll(".tab-header");
    const tabsContent = document.querySelectorAll(".tab-content");

    const setTub = (id) => {
        tabs.forEach((tab) => {
            tab.classList.remove("user-description__header-item--active");
            if (+tab.getAttribute("data-id") === +id) {
                tab.classList.add("user-description__header-item--active");
            }
        });
        tabsContent.forEach((content) => {
            content.classList.add("hide");
            if (+content.getAttribute("content-id") === +id) {
                content.classList.remove("hide");
            }
        });
    };

    if (tabs.length > 0 && tabsContent.length > 0) {
        setTub(1);
        tabs.forEach((tab) => {
            tab.addEventListener("click", () => {
                setTub(tab.getAttribute("data-id"));
            });
        });
    }

    /* ТАБЫ ПРОФИЛЬ ВРАЧА */

    /*ЛОГИКА ЧАТА */

    (() => {
        const chatId = document.querySelector('[name="chat_id"]')?.value;
        const userId = document.querySelector('[name="user_id"]')?.value;
        const messagesList = document.querySelector(".chat-messages__list");
        const chatMessagesWrapper = document.querySelector(
            ".chat-messages__wrapper"
        );
        const scrollButton = document.querySelector(
            ".chat-messages__scroll-button"
        );
        const scrollButtonCounter = document.querySelector(
            ".chat-messages__scroll-button-counter"
        );

        if (chatId && userId && messagesList) {
            const appUrl = document
                .querySelector('meta[property="og:url"]')
                ?.getAttribute("content");
            const messagesURL = appUrl
                ? `${appUrl}chat/messages/${chatId}`
                : `https://doctor24x7.ru/chat/messages/${chatId}`;

            let initialRenderDone = false;
            let intervalId = null;
            let lastMessageId = null; // будем хранить ID последнего сообщения, чтобы не дублировать
            let unseenMessagesCount = 0;

            const ACTIVE_INTERVAL = 10000; // 10 секунд
            const INACTIVE_INTERVAL = 600000; // 10 минут

            //Отправка при клике на Enter

            const textarea = document.querySelector(".chat-bottom__textarea");
            const form = document.querySelector(".chat-bottom__wrapper");
            let isSubmited = false;

            if (textarea && form) {
                form.addEventListener("submit", function (event) {
                    event.preventDefault();
                    if (isSubmited) return;
                    isSubmited = true;

                    const messageText = textarea.value.trim();
                    if (!messageText) {
                        isSubmited = false;
                        return;
                    }

                    // Собираем данные ДО очистки поля
                    const formData = new FormData(form);
                    formData.set("message", messageText);

                    // Очищаем поле и фокусируем
                    textarea.value = "";
                    textarea.focus();

                    // Optimistic render
                    const li = document.createElement("li");
                    li.className = "chat-messages__chat-message chat-message";

                    const wrapper = document.createElement("div");
                    wrapper.className = "chat-message__wrapper";

                    const main = document.createElement("div");
                    main.className = "chat-message__main";

                    const block = document.createElement("div");
                    block.className = "chat-message__message-block";

                    const span = document.createElement("span");
                    span.className = "chat-message__text";
                    span.textContent = messageText;

                    block.appendChild(span);
                    main.appendChild(block);
                    wrapper.appendChild(main);
                    li.appendChild(wrapper);
                    messagesList.appendChild(li);

                    chatMessagesWrapper.scrollTop =
                        chatMessagesWrapper.scrollHeight;

                    fetch(form.action, {
                        method: "POST",
                        body: formData,
                        headers: {
                            "X-Requested-With": "XMLHttpRequest",
                            "X-CSRF-TOKEN":
                                document.querySelector(
                                    'meta[name="csrf-token"]'
                                )?.content || "",
                        },
                    })
                        .then((response) => {
                            if (!response.ok)
                                throw new Error(
                                    `HTTP error! ${response.status}`
                                );
                            return response.text(); // ← безопасный способ обработки HTML или пустого ответа
                        })
                        .then(() => {
                            isSubmited = false;
                            fetchMessages(); // подтягиваем серверные данные
                        })
                        .catch((error) => {
                            console.error("Ошибка при отправке:", error);
                            isSubmited = false;
                        });
                });

                textarea.addEventListener("keydown", function (event) {
                    if (isSubmited) {
                        event.preventDefault();
                        return;
                    }

                    if (event.key === "Enter" && !event.shiftKey) {
                        event.preventDefault();
                        form.requestSubmit();
                    }
                });
            }

            // Кнопка скролла

            const setScrollButton = () => {
                const scrollTop = chatMessagesWrapper.scrollTop;
                const scrollHeight = chatMessagesWrapper.scrollHeight;
                const clientHeight = chatMessagesWrapper.clientHeight;

                const distanceFromBottom =
                    scrollHeight - scrollTop - clientHeight;

                if (distanceFromBottom > 10) {
                    scrollButton.classList.add(
                        "chat-messages__scroll-button--show"
                    );
                } else {
                    unseenMessagesCount = 0;
                    scrollButtonCounter.textContent = "";
                    scrollButton.classList.remove(
                        "chat-messages__scroll-button--show"
                    );
                    scrollButtonCounter.classList.remove(
                        "chat-messages__scroll-button-counter--show"
                    );
                }
            };

            chatMessagesWrapper.addEventListener("scroll", () => {
                setScrollButton();
            });

            scrollButton.addEventListener("click", () => {
                chatMessagesWrapper.scrollTo({
                    top: chatMessagesWrapper.scrollHeight,
                    behavior: "smooth",
                });

                unseenMessagesCount = 0;
                scrollButtonCounter.textContent = "";
                scrollButtonCounter.classList.remove(
                    "chat-messages__scroll-button-counter--show"
                );
            });

            const fetchMessages = () => {
                fetch(messagesURL)
                    .then((response) => {
                        if (!response.ok)
                            throw new Error(
                                `HTTP error! status: ${response.status}`
                            );
                        return response.json();
                    })
                    .then((data) => {
                        // console.log("Ответ от сервера:", data);

                        if (data.status !== 0) {
                            console.log(
                                "Статус не равен 0, останавливаем опрос."
                            );
                            clearInterval(intervalId);
                            document.removeEventListener(
                                "visibilitychange",
                                handleVisibilityChange
                            );
                            return;
                        }

                        const newMessages = data.messages;

                        // отрисовать только новые сообщения
                        const newItems = newMessages.filter(
                            (msg) => !lastMessageId || msg.id > lastMessageId
                        );

                        if (newItems.length > 0) {
                            renderMessages(data.messages, newItems);
                            lastMessageId = newItems[newItems.length - 1].id;
                        }
                    })
                    .catch((error) => {
                        console.error("Ошибка при запросе:", error);
                    });
            };

            const renderMessages = (messages, newItems) => {
                // Удаляем все сообщения, кроме системного (например, по классу chat-message--first)
                messagesList
                    .querySelectorAll("li:not(.chat-message--first)")
                    .forEach((el) => el.remove());

                messages.forEach((msg) => {
                    const isOwn = String(msg.user_id) !== String(userId);

                    const li = document.createElement("li");
                    li.className = "chat-messages__chat-message chat-message";

                    const wrapper = document.createElement("div");
                    wrapper.className =
                        "chat-message__wrapper" +
                        (isOwn ? " chat-message--own" : "");

                    const main = document.createElement("div");
                    main.className = "chat-message__main";

                    const block = document.createElement("div");
                    block.className = "chat-message__message-block";

                    const span = document.createElement("span");
                    span.className = "chat-message__text";
                    span.textContent = msg.message;

                    block.appendChild(span);
                    main.appendChild(block);
                    wrapper.appendChild(main);
                    li.appendChild(wrapper);
                    messagesList.appendChild(li);
                });

                const isAtBottom =
                    chatMessagesWrapper.scrollHeight -
                        chatMessagesWrapper.scrollTop -
                        chatMessagesWrapper.clientHeight <=
                    50;

                if (!initialRenderDone) {
                    chatMessagesWrapper.scrollTop =
                        chatMessagesWrapper.scrollHeight;
                    initialRenderDone = true;
                } else if (!isAtBottom) {
                    unseenMessagesCount += newItems.length;
                    scrollButtonCounter.textContent = unseenMessagesCount;
                    scrollButtonCounter.classList.add(
                        "chat-messages__scroll-button-counter--show"
                    );
                } else {
                    unseenMessagesCount = 0;
                    scrollButtonCounter.textContent = "";
                    scrollButtonCounter.classList.remove(
                        "chat-messages__scroll-button-counter--show"
                    );
                    scrollButton.classList.remove(
                        "chat-messages__scroll-button--show"
                    );
                }
                setScrollButton();
            };

            const startPolling = (interval) => {
                clearInterval(intervalId);
                intervalId = setInterval(fetchMessages, interval);
            };

            const handleVisibilityChange = () => {
                if (document.visibilityState === "visible") {
                    fetchMessages();
                    startPolling(ACTIVE_INTERVAL);
                } else {
                    startPolling(INACTIVE_INTERVAL);
                }
            };

            // Инициализация
            fetchMessages();
            startPolling(ACTIVE_INTERVAL);
            document.addEventListener(
                "visibilitychange",
                handleVisibilityChange
            );
        }
    })();

    /*ЛОГИКА ЧАТА */
});
