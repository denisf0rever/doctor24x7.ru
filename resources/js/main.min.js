// import '../../node_modules/swiper/swiper-bundle.min';

document.addEventListener('DOMContentLoaded', function () {


  /*ВЕРХНЕЕ МОБИЛЬНЕО МЕНЮ БУРГЕР*/

  const burger = document.querySelector('.header__burger');
  const mobileHeaderNav = document.querySelector('.mobile-header-nav');

  // Открытие меню при клике на бургер

  if (burger) {
    burger.onclick = () => {
      mobileHeaderNav.classList.add('mobile-header-nav__opened');
    };

    document.addEventListener('click', (event) => {
      // Проверяем, если клик был вне меню и не по бургеру
      if (!mobileHeaderNav.contains(event.target) && !burger.contains(event.target)) {
        mobileHeaderNav.classList.remove('mobile-header-nav__opened');
      }
    });
  }

  // Закрытие меню при клике вне меню


  /*ВЕРХНЕЕ МОБИЛЬНЕО МЕНЮ БУРГЕР*/

  /* СЕЛЕКТОР В САЙДБАРЕ */
  const selectWrapper = document.querySelector('.form-select__select-wrapper');
  const select = document.querySelector('.form-select__status-select-wrapper');
  const selectArrow = document.querySelector('.form-select__status-arrow');


  if (selectWrapper) {
    selectWrapper.onclick = () => {
      selectArrow.classList.toggle('form-select__rotate-arrow');
      select.classList.toggle('form-select__status-hide');
    }

    document.addEventListener('click', (e) => {
      if (!selectWrapper.contains(e.target)) {
        selectArrow.classList.remove('form-select__rotate-arrow');
        select.classList.add('form-select__status-hide');
      }
    });
  }
  /* СЕЛЕКТОР В САЙДБАРЕ */

  /*ТАБЫ НА ГЛАВНОЙ СТРАНИЦЕ */

  const buttons = document.querySelectorAll('.cards__toggle-item');
  const contents = document.querySelectorAll('.cards__list');

  if (buttons.length > 0) {
    buttons.forEach(button => {
      button.addEventListener('click', function () {
        const tabId = this.getAttribute('data-tab');
        // Deactivate all tabs
        buttons.forEach(btn => btn.classList.remove('cards__toggle-item-active'));
        contents.forEach(content => content.classList.add('cards__hide'));

        // Activate the clicked tab and its content
        this.classList.add('cards__toggle-item-active');
        document.getElementById(tabId).classList.remove('cards__hide');
      });
    });
  }


  /*табы 2 */

  const buttonsМVariant = document.querySelectorAll('.cards__toggle-item-variant');

  if (buttonsМVariant.length > 0) {
    buttonsМVariant.forEach(button => {
      button.addEventListener('click', function () {
        const tabId = this.getAttribute('data-tab');
        // Deactivate all tabs
        buttonsМVariant.forEach(btn => btn.classList.remove('cards__toggle-item-variant-active'));
        contents.forEach(content => content.classList.add('cards__hide'));

        // Activate the clicked tab and its content
        this.classList.add('cards__toggle-item-variant-active');
        document.getElementById(tabId).classList.remove('cards__hide');
      });
    });
  }


  /*ТАБЫ НА ГЛАВНОЙ СТРАНИЦЕ */

  /*МОБИЛЬНОЕ МЕНЮ */

  let isConsultanstsLoaded = false;

  const bottomMenuOpen = document.querySelector('.mobile-panel-bottom__open');
  const topMobilePanel = document.querySelector('.mobile-panel-top');
  const topMobilePanelClose = document.querySelector('.mobile-panel-top__close');

  if (bottomMenuOpen) {
    bottomMenuOpen.onclick = (e) => {
      e.preventDefault();
      bottomMenuOpen.classList.toggle('mobile-panel-bottom__open-link-active')
      topMobilePanel.classList.toggle('mobile-panel-top__active')
      if (!isConsultanstsLoaded) {
        showFirstEmployeeScreen();
      }
    }
  }

  if (topMobilePanelClose) {
    topMobilePanelClose.onclick = () => {
      bottomMenuOpen.classList.remove('mobile-panel-bottom__open-link-active')
      topMobilePanel.classList.remove('mobile-panel-top__active')
      if (!isConsultanstsLoaded) {
        showFirstEmployeeScreen();
      }
    }
  }

  /*МОБИЛЬНОЕ МЕНЮ */

  /*МОБИЛЬНЫЕ ТАБЫ */

  const mobileTabsButtons = document.querySelectorAll('.mobile-panel-top__tub-button');
  const mobileTabs = document.querySelectorAll('.mobile-panel-top__tub');

  const changeMobileTab = (el) => {
    mobileTabsButtons.forEach((element, key) => {
      element.classList.remove('mobile-panel-top__tub-button-active');
      if (element == el) {
        element.classList.add('mobile-panel-top__tub-button-active');
      }
    })
    mobileTabs.forEach((element, key) => {
      element.style.display = 'none';
      if (el.getAttribute('data-tab') == element.getAttribute('data-tab')) {
        element.style.display = 'block';
      }
    })
  }

  if (mobileTabsButtons.length > 0) {
    mobileTabsButtons.forEach((el) => {
      el.onclick = (e) => {
        changeMobileTab(el);
      }
    })
  }

  /*МОБИЛЬНЫЕ ТАБЫ */

  /*ПОЛУЧЕНИЕ ЭКСПЕРТОВ ИЗ JSON */

  let employeesData = {};

  const fetchEmployees = async () => {
    try {
      const response = await fetch('/doctors.json');
      if (!response.ok) {
        throw new Error('Network response was not ok ' + response.statusText);
      }
      employeesData = await response.json();
    } catch (error) {
      console.error('Error fetching the JSON file:', error);
    }
  }

  const createEmployeeCategory = (data) => {
    return `
      <li class="employees__item">
        <div class="employees__category">
          <div class="employees__category-name">${data}</div>
        </div>
      </li>
    `;
  }

  const createEmployeeElement = (data) => {
    return `
      <li class="employees__item">
        <a href="/profile/${data.slug}" class="employees__link">
          <img
            src="/uploads/sfGuard/avatars/${data.avatar}"
            alt="" class="employees__avatar">
          <div class="employees__fullname">${data.name}</div>
          <div class="employees__caption">${data.caption}</div>
        </a>
      </li>
      `;
  }

  const employeesList = document.querySelector('.employees__list');
  const employeesBack = document.querySelector('.employees__item-back');

  let employeeCategoryHistory = [];

  employeesBack.onclick = () => {
    while (employeesList.firstChild) {
      employeesList.removeChild(employeesList.firstChild);
    }
    employeeCategoryHistory.splice(employeeCategoryHistory.length - 1, 1);
    showEmployees(employeeCategoryHistory[employeeCategoryHistory.length - 1]);
    if (employeeCategoryHistory.length === 1) {
      employeesBack.classList.add('employees__hide');
    }
  }

  const showEmployees = (employeesDataItemsFull, operationType) => {
    if (employeeCategoryHistory.length === 1) {
      employeesBack.classList.add('employees__hide');
    }
    const employeesDataItems = Object.keys(employeesDataItemsFull);
    if (Array.isArray(employeesDataItemsFull)) {
      for (let i = 0; i < employeesDataItemsFull.length; i++) {
        employeesList.insertAdjacentHTML('beforeend', createEmployeeElement(employeesDataItemsFull[i]));
      }
    }
    else {
      for (let i = 0; i < employeesDataItems.length; i++) {
        employeesList.insertAdjacentHTML('beforeend', createEmployeeCategory(employeesDataItems[i]));
      }
    }
    const employeeItems = document.querySelectorAll('.employees__item');
    if (operationType === 1) {
      employeeCategoryHistory.push(employeesDataItemsFull[employeesDataItems[1]]);
      while (employeesList.firstChild) {
        employeesList.removeChild(employeesList.firstChild);
      }
      showEmployees(employeeCategoryHistory[employeeCategoryHistory.length - 1], 0);
      employeesBack.classList.remove('employees__hide');
    }
    else {
      employeeItems.forEach((el, key) => {
        el.onclick = () => {
          if (employeeCategoryHistory.length < 3) {
            employeeCategoryHistory.push(employeesDataItemsFull[employeesDataItems[key]]);
            while (employeesList.firstChild) {
              employeesList.removeChild(employeesList.firstChild);
            }
            showEmployees(employeeCategoryHistory[employeeCategoryHistory.length - 1], 0);
            employeesBack.classList.remove('employees__hide');
          }
        }
      })
    }
  }

  const showFirstEmployeeScreen = async (operationType) => {
    await fetchEmployees();
    employeeCategoryHistory[0] = employeesData;
    showEmployees(employeesData, operationType);
  }


  const doctorsButton = document.querySelector('#doctors');
  const psychologistsButton = document.querySelector('#psychologists');

  doctorsButton.onclick = (event) => {
    event.preventDefault();
    if (!bottomMenuOpen.classList.contains('mobile-panel-bottom__open-link-active')) {
      employeesList.innerHTML = '';
      employeesData = {};
      employeeCategoryHistory = [];
      bottomMenuOpen.classList.add('mobile-panel-bottom__open-link-active');
      topMobilePanel.classList.add('mobile-panel-top__active');
      if (!isConsultanstsLoaded) {
        showFirstEmployeeScreen(0);
      }
      changeMobileTab(mobileTabsButtons[1]);
    }
  }

  psychologistsButton.onclick = (event) => {
    event.preventDefault();
    if (!bottomMenuOpen.classList.contains('mobile-panel-bottom__open-link-active')) {
      employeesList.innerHTML = '';
      employeesData = {};
      employeeCategoryHistory = [];
      bottomMenuOpen.classList.add('mobile-panel-bottom__open-link-active');
      topMobilePanel.classList.add('mobile-panel-top__active');
      if (!isConsultanstsLoaded) {
        showFirstEmployeeScreen(1);
      }
      changeMobileTab(mobileTabsButtons[1]);
    }
  }


  /*ПОЛУЧЕНИЕ ЭКСПЕРТОВ ИЗ JSON */



});
